trigger: none

parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'ReleaseType'
  displayName: 'Type of release'
  type: string
  default: preview
  values:
    - full
    - preview

pr: none

schedules:
  - cron: "0 0 * * *"
    displayName: Mon-Fri at Midnight
    branches:
      include:
        - main
    always: true

variables:
  solution: '**/*.sln'
  configuration: 'Release'
  versionMajor: 3
  versionMinor: 0
  versionMajorMinor: '$(versionMajor).$(versionMinor)'  # This variable is only used for the counter so we reset properly when either major or minor is bumped
  versionPatch: $[counter(variables['versionMajorMinor'], 0)] # This will reset when we bump minor version
  binariesVersion: '$(versionMajor).$(versionMinor).$(versionPatch)'
  nugetVersion: $[replace(replace('True', eq('${{ parameters.ReleaseType }}', 'full'), '$(binariesVersion)'),'True','$(binariesVersion)-preview')] # This will set the preview tag to the version based on the ReleaseType parameter.
  oopWorkerSupportedExtensionVersion: $[replace(replace('True', eq('${{ parameters.ReleaseType }}', 'full'), '$(binariesVersion)'),'True','$(binariesVersion)-preview')] # This will set the expression to pull the preview vs full version based on the ReleaseType parameter.
  LGTM.UploadSnapshot: true
  Codeql.Enabled: true
  Codeql.TSAEnabled: true
  Codeql.PublishDatabaseLog: true


stages:
- stage: BuildPublish
  displayName: 'Release Build and Publish'
  jobs:
  - job: BuildTest
    displayName: 'Build and Test on '

  # Verifies cross-platform build and test
    strategy:
      matrix:
        mac:
          imageName: 'macos-latest'
          # Disabling integration tests on macOS due to issues with running MSSQL on Docker
          # We need to set up a self-hosted agent with Docker running by default: https://github.com/microsoft/azure-pipelines-tasks/issues/12823
          testServer: ''
          Codeql.BuildIdentifier: extension_mac
          Codeql.Language: csharp,java,javascript,powershell,python,tsql
        windows:
          imageName: 'windows-latest'
          testServer: '(LocalDb)\MSSQLLocalDB'
          Codeql.BuildIdentifier: extension_windows
          Codeql.Language: csharp,java

    pool:
      vmImage: '$(imageName)'

    workspace:
      clean: all

    timeoutInMinutes: '120'

    steps:
      - template: 'template-steps-build-test.yml'
        parameters:
          solution: '$(solution)'
          configuration: '$(configuration)'
          nugetVersion: '$(nugetVersion)'
          binariesVersion: '$(binariesVersion)'
          oopWorkerSupportedExtensionVersion: '$(oopWorkerSupportedExtensionVersion)'

  - job: BuildTestPublishLinux
    displayName: 'Build, Test and Publish on linux'
    variables:
      Codeql.BuildIdentifier: extension_linux
      Codeql.Language: csharp,java

    pool:
      vmImage: 'ubuntu-latest'

    workspace:
      clean: all

    timeoutInMinutes: '120'

    steps:
      - template: 'template-steps-build-test.yml'
        parameters:
          solution: '$(solution)'
          configuration: '$(configuration)'
          nugetVersion: '$(nugetVersion)'
          binariesVersion: '$(binariesVersion)'
          oopWorkerSupportedExtensionVersion: '$(oopWorkerSupportedExtensionVersion)'
          testServer: ''

      - template: 'template-steps-publish.yml'
        parameters:
          solution: '$(solution)'
          configuration: '$(configuration)'
          nugetVersion: '$(nugetVersion)'

- stage: BuildJava
  displayName: 'Release Build and Publish Java Library'
  dependsOn: []
  variables:
    Codeql.BuildIdentifier: java_library
    Codeql.Language: java
  jobs:
  - job: BuildJavaLibrary
    displayName: Build Java Library

    pool:
      vmImage: 'windows-latest'

    steps:
    - template: build-release-java.yml
