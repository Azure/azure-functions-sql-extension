parameters:
  configuration: ''
  solution: ''
  nugetVersion: ''
  testFilter: ''

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK 3.1.x for Build'
  inputs:
    version: '3.1.x'

- script: npm install -g azure-functions-core-tools@3
  displayName: 'Install Azure Functions Core Tools'

- script: npm install -g azurite
  displayName: 'Install Azurite Local Storage Emulator'

- task: DockerInstaller@0
  displayName: Docker Installer
  inputs:
    dockerVersion: 17.09.0-ce
    releaseType: stable
        
- script: docker pull mcr.microsoft.com/mssql/server:2019-latest
  displayName: Pull MSSQL Docker Image

- bash: echo "##vso[task.setvariable variable=serverPassword]Test-$(Build.BuildNumber)-$(Get-Date -format yyyyMMdd-Hmmss)"
  displayName: Generate password for test server

- script: 'docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=$(serverPassword)" -e "MSSQL_PID=Express"
   -p 1433:1433 --name sql1 -h sql1
   -d mcr.microsoft.com/mssql/server:2019-latest'
  displayName: Start Server in Docker Container

- task: DotNetCoreCLI@2
  displayName: '.NET Restore'
  inputs:
    command: restore
    projects: '${{ parameters.solution }}'

  # Build outputs directly into staging directory
- task: DotNetCoreCLI@2
  displayName: '.NET Build'
  inputs:
    command: build
    projects: '${{ parameters.solution }}'
    arguments: '--configuration ${{ parameters.configuration }} --output $(Build.ArtifactStagingDirectory) -p:PackageVersion="${{ parameters.nugetVersion }}"'

  # Above build task generates a nuget package, this extra step packs into a -preview nuget with same version #
  # Extra parameter GeneratePackageOnBuild=false is needed for issue https://github.com/dotnet/sdk/pull/3473#issuecomment-516612070
- task: DotNetCoreCLI@2
  displayName: '.NET Pack Preview Nuget'
  inputs:
    command: custom
    custom: pack
    projects: '${{ parameters.solution }}'
    arguments: '--configuration ${{ parameters.configuration }} --output $(Build.ArtifactStagingDirectory) -p:PackageVersion="${{ parameters.nugetVersion }}-preview" -p:GeneratePackageOnBuild=false'

- task: DotNetCoreCLI@2
  displayName: '.NET Test'
  env:
    SA_PASSWORD: '$(serverPassword)'
  inputs:
    command: test
    projects: '${{ parameters.solution }}'
    arguments: '--configuration ${{ parameters.configuration }} ${{ parameters.testFilter }} /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.ArtifactStagingDirectory)\TestResults\coverage\ /p:Exclude="[SqlExtensionSamples]*"'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Results'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.ArtifactStagingDirectory)/TestResults/coverage/coverage.cobertura.xml'

- script: |
    docker stop sql1
    docker rm sql1
  displayName: 'Stop and Remove SQL Server Image'