parameters:
  configuration: ''
  solution: ''
  nugetVersion: ''
  binariesVersion: ''
  testServer: ''
  oopWorkerSupportedExtensionVersion: ''
  sourcesSubdirectory: ''

steps:
- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    useGlobalJson: true

# Install .Net Core 3.1.0 as PowerShell tests are unable to find 3.1.0 framework to run tests
- task: UseDotNet@2
  displayName: 'Install .NET Core 3.1 sdk'
  inputs:
    packageType: sdk
    version: '3.1.x'

- task: npmAuthenticate@0
  displayName: 'npm Authenticate for project'
  inputs:
    workingFile: $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/.npmrc

- script: npm install azure-functions-core-tools --global --globalconfig $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/.npmrc --loglevel verbose
  displayName: 'Install Azure Functions Core Tools'

- script: npm install azurite --global --globalconfig $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/.npmrc --loglevel verbose
  displayName: 'Install Azurite Local Storage Emulator'
  
# This step is necessary because npm installs to a non-traditional location on Windows hosted agents
# For non-Windows agents we still want to ensure that we always get the correct location where the tools are installed
# This sets the path to npm global installations as a variable which then gets passed to .NET test task
- bash: echo "##vso[task.setvariable variable=nodeModulesPath]$(npm root -g)"
  displayName: 'Set npm installation path'

- bash: echo "##vso[task.setvariable variable=azureFunctionsExtensionBundlePath]$(func GetExtensionBundlePath)"
  displayName: 'Set Azure Functions extension bundle path'
  workingDirectory: $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/samples/samples-js

- task: DockerInstaller@0
  displayName: Docker Installer
  inputs:
    dockerVersion: 17.09.0-ce
    releaseType: stable
  condition: and(succeeded(), eq(variables['Agent.OS'], 'linux'))

- script: docker pull mcr.microsoft.com/mssql/server:2019-latest
  displayName: Pull MSSQL Docker Image
  condition: and(succeeded(), eq(variables['Agent.OS'], 'linux'))

- bash: echo "##vso[task.setvariable variable=serverPassword]Test-$(Build.BuildNumber)-$(date +%Y%m%d-%H%M%S)"
  displayName: Generate password for test server
  condition: and(succeeded(), eq(variables['Agent.OS'], 'linux'))

- script: 'docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=$(serverPassword)" -e "MSSQL_PID=Express"
   -p 1433:1433 --name sql1 -h sql1
   -d mcr.microsoft.com/mssql/server:2019-latest'
  displayName: Start Server in Docker Container
  condition: and(succeeded(), eq(variables['Agent.OS'], 'linux'))

- script: |
    echo "Waiting for SQL Server container to start..."
    sleep 10
    
    echo "Checking container status..."
    docker ps -a --filter name=sql1
    
    echo "Checking container logs..."
    docker logs sql1
    
    echo "Waiting for SQL Server to be ready..."
    for i in {1..30}; do
      if docker exec sql1 /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$(serverPassword)" -Q "SELECT 1" > /dev/null 2>&1; then
        echo "SQL Server is ready!"
        break
      fi
      echo "Attempt $i: SQL Server not ready yet, waiting 5 seconds..."
      if [ $i -eq 30 ]; then
        echo "SQL Server failed to start within timeout period"
        echo "Final container logs:"
        docker logs sql1
        exit 1
      fi
      sleep 5
    done
    
    # Final check to ensure connection is working
    echo "Testing SQL Server connection..."
    docker exec sql1 /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$(serverPassword)" -Q "SELECT @@VERSION"
  displayName: Wait for SQL Server to be ready
  condition: and(succeeded(), eq(variables['Agent.OS'], 'linux'))

- script: |
    echo "Environment variables for testing:"
    echo "SA_PASSWORD: $(if [ -z "$(serverPassword)" ]; then echo "NOT SET"; else echo "SET"; fi)"
    echo "TEST_SERVER: localhost"
    echo "SqlConnectionString environment variable:"
    echo $SqlConnectionString
    
    # Show the connection string that should be generated
    echo "Expected connection string format:"
    echo "Server=localhost;Initial Catalog=<dbname>;User ID=SA;Password=<password>;Pooling=false;Encrypt=Optional"
    
    echo "Testing connection from host machine..."
    sqlcmd -S localhost -U sa -P "$(serverPassword)" -Q "SELECT 'Connection successful' as Status" || echo "Host connection failed, this is expected - using container connection"
  displayName: 'Validate test environment'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'linux'))

- powershell: $(System.DefaultWorkingDirectory)/builds/scripts/UpdateLogLevel.ps1
  displayName: Set logging level
  condition: and(succeeded(), ne(variables['AFSQLEXT_TEST_LOGLEVEL'], ''))


- script: |
    npm install --userconfig $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/.npmrc --loglevel verbose
    npm run lint
  workingDirectory: $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/samples/samples-js
  displayName: Lint samples-js

- script: |
    npm install --userconfig $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/.npmrc --loglevel verbose
    npm run lint
  workingDirectory: $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/test/Integration/test-js
  displayName: Lint test-js

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.9'
    addToPath: true
    architecture: 'x64'

- script: |
    pip3 install "pylint<3.0"
    pip3 install pylintfileheader
    pylint --recursive=yes .
  workingDirectory: $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/samples/samples-python
  displayName: Lint samples-python

- script: |
    pip3 install -r requirements.txt
  workingDirectory: $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/samples/samples-python
  displayName: Install samples-python dependencies

- task: Maven@4
  displayName: Build Java Samples
  inputs:
    mavenPomFile: $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/samples/samples-java/pom.xml
    # batch-mode and Slf4jMavenTransferListener definition are used to make the build logging verbose
    # update-snapshot forces a check for updated library dependencies
    options: --batch-mode --define=org.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn --update-snapshots
    checkStyleRunAnalysis: true

- task: Maven@4
  displayName: Build Java Tests
  inputs:
    mavenPomFile: $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/test/Integration/test-java/pom.xml
    # batch-mode and Slf4jMavenTransferListener definition are used to make the build logging verbose
    # update-snapshot forces a check for updated library dependencies
    options: --batch-mode --define=org.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn --update-snapshots
    checkStyleRunAnalysis: true

  # The build process for the OOP samples involve generating a temporary csproj in the %TEMP% directory, so it doesn't pick
  # up the custom nuget.config we have. Set up the local-packages source here so that it can build correctly. Running from
  # WorkFolder so it applies globally.
- task: DotNetCoreCLI@2
  displayName: Set up local-packages Nuget source
  inputs:
    command: custom
    custom: nuget
    arguments: add source -n afsqlext.local $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/local-packages
    workingDirectory: $(Agent.WorkFolder)

- task: DotNetCoreCLI@2
  displayName: .NET Build
  inputs:
    command: build
    projects: ${{ parameters.solution }}
    arguments: --configuration ${{ parameters.configuration }} -p:Version=${{ parameters.binariesVersion }} -p:OOPWorkerSupportedExtensionVersion=${{ parameters.oopWorkerSupportedExtensionVersion }} -p:PackageVersion=${{ parameters.nugetVersion }} -v d

  # Copy the Sql nupkg to ensure it's available for tests since the package copy task is failing occasionally so having this redundancy.
- task: CopyFiles@2
  displayName: 'Copy local Sql package to local-packages folder'
  inputs:
    sourceFolder: $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/src/bin/${{ parameters.configuration }}
    contents: '*.nupkg'
    targetFolder: $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/local-packages
    overWrite: true

- task: CopyFiles@2
  displayName: 'Copy Sql extension dll to Azure Functions extension bundle'
  inputs:
    sourceFolder: $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/src/bin/${{ parameters.configuration }}/netstandard2.0
    contents: Microsoft.Azure.WebJobs.Extensions.Sql.dll
    targetFolder: $(azureFunctionsExtensionBundlePath)/bin
    overWrite: true

- task: DotNetCoreCLI@2
  displayName: '.NET Test on Mac (unit tests only)'
  env:
    TEST_SERVER: ${{ parameters.testServer }}
    NODE_MODULES_PATH: '$(nodeModulesPath)'
    AZUREFUNCTIONS_SQLBINDINGS_TELEMETRY_OPTOUT: '1'
  inputs:
    command: test
    projects: '${{ parameters.solution }}'
    arguments: --configuration ${{ parameters.configuration }} --filter FullyQualifiedName!~Integration --no-build
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))

- task: DotNetCoreCLI@2
  displayName: '.NET Test on Windows (unit tests and .NET In-Proc integration tests)'
  env:
    TEST_SERVER: ${{ parameters.testServer }}
    NODE_MODULES_PATH: '$(nodeModulesPath)'
    AZUREFUNCTIONS_SQLBINDINGS_TELEMETRY_OPTOUT: '1'
    # Only running CSharp integration tests to get accurate code coverage numbers
    LANGUAGES_TO_TEST: 'CSharp'
  inputs:
    command: test
    projects: '${{ parameters.solution }}'
    # Skip any non .NET In-Proc integration tests. Otherwise, the following error will be thrown:
    # System.InvalidOperationException : No data found for Microsoft.Azure.WebJobs.Extensions.Sql.Tests.Integration.SqlOutputBindingIntegrationTests.NoPropertiesThrows
    arguments: --configuration ${{ parameters.configuration }} --filter "FullyQualifiedName!~NoPropertiesThrows & FullyQualifiedName!~AddProductWithSlashInColumnName" --collect "Code Coverage" -s $(Build.SourcesDirectory)/${{ parameters.sourcesSubdirectory }}/test/coverage.runsettings --no-build
  condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Windows_NT'))

- task: DotNetCoreCLI@2
  displayName: '.NET Test on Windows (Non .NET In-Proc)'
  env:
    TEST_SERVER: ${{ parameters.testServer }}
    NODE_MODULES_PATH: '$(nodeModulesPath)'
    AZUREFUNCTIONS_SQLBINDINGS_TELEMETRY_OPTOUT: '1'
    LANGUAGES_TO_TEST: 'Java,JavaScript,OutOfProc,PowerShell,Python,Csx'
  inputs:
    command: test
    projects: '${{ parameters.solution }}'
    # Skip any CSharp only integration tests
    arguments: --configuration ${{ parameters.configuration }} --filter "FullyQualifiedName~Integration & FullyQualifiedName!~AddProductsCollectorTest" --no-build
  condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Windows_NT'))

- task: DotNetCoreCLI@2
  displayName: '.NET Test on Linux (both unit and integration tests)'
  env:
    SA_PASSWORD: '$(serverPassword)'
    NODE_MODULES_PATH: '$(nodeModulesPath)'
    AZUREFUNCTIONS_SQLBINDINGS_TELEMETRY_OPTOUT: '1'
    TEST_SERVER: 'localhost'
  inputs:
    command: test
    projects: '${{ parameters.solution }}'
    arguments: --configuration ${{ parameters.configuration }} --no-build --logger "console;verbosity=detailed"
  condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'linux'))

- script: |
    docker stop sql1
    docker rm sql1
  displayName: 'Stop and Remove SQL Server Image'
  condition: and(always(), eq(variables['Agent.OS'], 'linux'))
  condition: and(succeeded(), eq(variables['Agent.OS'], 'linux'))

# Don't run for PRs since this currently breaks on runs from forks. We run this daily ourselves anyways.
- task: securedevelopmentteam.vss-secure-development-tools.build-task-roslynanalyzers.RoslynAnalyzers@3
  inputs:
    userProvideBuildInfo: 'autoMsBuildInfo'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), ne(variables['Build.Reason'], 'PullRequest'))

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'
  inputs:
    failOnAlert: true
