parameters:
  configuration: ''
  solution: ''
  nugetVersion: ''
  binariesVersion: ''
  testFilter: ''
  testServer: ''

steps:
- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    useGlobalJson: true

# Run Policheck early to avoid scanning dependency folders
- task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@2
  displayName: 'Run PoliCheck'
  inputs:
    targetType: F
    result: PoliCheck.xml
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- script: npm install -g azure-functions-core-tools
  displayName: 'Install Azure Functions Core Tools'

- script: npm install -g azurite
  displayName: 'Install Azurite Local Storage Emulator'

# This step is necessary because npm installs to a non-traditional location on Windows hosted agents
# This sets the path to npm global installations as a variable which then gets passed to .NET test task
- bash: echo "##vso[task.setvariable variable=nodeModulesPath]$(npm root -g)"
  displayName: 'Set npm installation path for Windows'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- bash: echo "##vso[task.setvariable variable=azureFunctionsExtensionBundlePath]$(func GetExtensionBundlePath)"
  displayName: 'Set Azure Functions extension bundle path'
  workingDirectory: $(Build.SourcesDirectory)/samples/samples-js

- task: DockerInstaller@0
  displayName: Docker Installer
  inputs:
    dockerVersion: 17.09.0-ce
    releaseType: stable
  condition: and(succeeded(), eq(variables['Agent.OS'], 'linux'))

- script: docker pull mcr.microsoft.com/mssql/server:2019-latest
  displayName: Pull MSSQL Docker Image
  condition: and(succeeded(), eq(variables['Agent.OS'], 'linux'))

- bash: echo "##vso[task.setvariable variable=serverPassword]Test-$(Build.BuildNumber)-$(Get-Date -format yyyyMMdd-Hmmss)"
  displayName: Generate password for test server
  condition: and(succeeded(), eq(variables['Agent.OS'], 'linux'))

- script: 'docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=$(serverPassword)" -e "MSSQL_PID=Express"
   -p 1433:1433 --name sql1 -h sql1
   -d mcr.microsoft.com/mssql/server:2019-latest'
  displayName: Start Server in Docker Container
  condition: and(succeeded(), eq(variables['Agent.OS'], 'linux'))

- task: DotNetCoreCLI@2
  displayName: '.NET Restore'
  inputs:
    command: restore
    projects: '${{ parameters.solution }}'

  # Don't generate package so we can sign it before packaging
- task: DotNetCoreCLI@2
  displayName: '.NET Build'
  inputs:
    command: build
    projects: '${{ parameters.solution }}'
    arguments: '--configuration ${{ parameters.configuration }} -p:GeneratePackageOnBuild=false -p:Version=${{ parameters.binariesVersion }}'

- task: CopyFiles@2
  displayName: 'Copy Sql extension dll to Azure Functions extension bundle'
  inputs:
    sourceFolder: $(Build.SourcesDirectory)/src/bin/${{ parameters.configuration }}/netstandard2.0
    contents: Microsoft.Azure.WebJobs.Extensions.Sql.dll
    targetFolder: $(azureFunctionsExtensionBundlePath)/bin
    overWrite: true

- script: |
    npm install
    npm run lint
  workingDirectory: $(Build.SourcesDirectory)/samples/samples-js
  displayName: Lint samples-js

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.9'
    addToPath: true
    architecture: 'x64'

- script: |
    pip3 install pylint_runner
    pip3 install pylintfileheader
    pylint_runner
  workingDirectory: $(Build.SourcesDirectory)/samples/samples-python
  displayName: Lint samples-python

- task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@4
  inputs:
    InputType: 'CommandLine'
    arguments: 'analyze $(Build.SourcesDirectory)\src\bin\${{ parameters.configuration }}\* --recurse --verbose'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

# Don't run for PRs since this currently breaks on runs from forks. We run this daily ourselves anyways.
- task: securedevelopmentteam.vss-secure-development-tools.build-task-roslynanalyzers.RoslynAnalyzers@3
  inputs:
    userProvideBuildInfo: 'autoMsBuildInfo'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), ne(variables['Build.Reason'], 'PullRequest'))

- task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
  inputs:
    toolMajorVersion: V2
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- task: securedevelopmentteam.vss-secure-development-tools.build-task-report.SdtReport@2
  displayName: 'Create Security Analysis Report'
  inputs:
    GdnExportTsvFile: true
    GdnExportHtmlFile: true
    GdnExportOutputBaselineFile: myBaseline
    GdnExportOutputBaseline: myBaselinedResults
    GdnExportOutputSuppressionFile: mySuppressions
    GdnExportOutputSuppressionSet: mySuppressionSet
    GdnExportPolicyMinSev: Warning
    GdnExportGdnToolApiScanSeverity: Warning
    GdnExportGdnToolArmorySeverity: Warning
    GdnExportGdnToolBanditSeverity: Warning
    GdnExportGdnToolBinSkimSeverity: Warning
    GdnExportGdnToolCodesignValidationSeverity: Warning
    GdnExportGdnToolCredScanSeverity: Warning
    GdnExportGdnToolESLintSeverity: Warning
    GdnExportGdnToolFlawfinderSeverity: Warning
    GdnExportGdnToolFortifyScaSeverity: Warning
    GdnExportGdnToolFxCopSeverity: Warning
    GdnExportGdnToolGosecSeverity: Warning
    GdnExportGdnToolModernCopSeverity: Warning
    GdnExportGdnToolPoliCheckSeverity: Warning
    GdnExportGdnToolRoslynAnalyzersSeverity: Warning
    GdnExportGdnToolSDLNativeRulesSeverity: Warning
    GdnExportGdnToolSemmleSeverity: Warning
    GdnExportGdnToolSpotBugsSeverity: Warning
    GdnExportGdnToolTSLintSeverity: Warning
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@3
  displayName: 'Publish Security Analysis Logs'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@2
  displayName: 'TSA upload to Codebase: Sql Bindings Stamp: TSA'
  inputs:
    GdnPublishTsaOnboard: true
    GdnPublishTsaConfigFile: '$(Build.SourcesDirectory)\builds\TSAConfig.gdntsa'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['TSA_UPLOAD'], 'true'))

# 5.0 isn't supported on Mac yet
- task: UseDotNet@2
  displayName: 'Install .NET Core 2.1.x SDK for CodeSigning on Mac'
  inputs:
    version: '2.1.x'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))

- task: EsrpCodeSigning@1
  displayName: 'ESRP CodeSigning - Binaries'
  inputs:
    ConnectedServiceName: 'Code Signing'
    FolderPath: '$(Build.SourcesDirectory)/src/bin/${{ parameters.configuration }}'
    Pattern: 'Microsoft.Azure.WebJobs.Extensions.Sql.dll'
    signConfigType: inlineSignParams
    inlineOperation: |
     [
       {
        "KeyCode" : "CP-235847-SN",
        "operationSetCode" : "StrongNameSign",
        "Parameters" : [],
        "ToolName" : "sign",
        "ToolVersion" : "1.0"
       },
       {
        "KeyCode" : "CP-235847-SN",
        "operationSetCode" : "StrongNameVerify",
        "Parameters" : [],
        "ToolName" : "sign",
        "ToolVersion" : "1.0"
       },
       {
         "keyCode": "CP-230012",
         "operationSetCode": "SigntoolSign",
         "parameters": [
          {
            "parameterName": "OpusName",
            "parameterValue": "Azure Functions SQL Extension"
          },
          {
            "parameterName": "OpusInfo",
            "parameterValue": "https://github.com/Azure/azure-functions-sql-extension"
          },
          {
            "parameterName": "PageHash",
            "parameterValue": "/NPH"
          },
          {
            "parameterName": "FileDigest",
            "parameterValue": "/fd sha256"
          },
          {
            "parameterName": "TimeStamp",
            "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
          }
         ],
         "toolName": "signtool.exe",
         "toolVersion": "6.2.9304.0"
       },
       {
         "keyCode": "CP-230012",
         "operationSetCode": "SigntoolVerify",
         "parameters": [
          {
            "parameterName": "VerifyAll",
            "parameterValue": "/all"
          }
         ],
         "toolName": "signtool.exe",
         "toolVersion": "6.2.9304.0"
       }
     ]
    SessionTimeout: 600
    MaxConcurrency: 5

  # Extra parameter GeneratePackageOnBuild=false is needed for issue https://github.com/dotnet/sdk/pull/3473#issuecomment-516612070
- task: DotNetCoreCLI@2
  displayName: '.NET Pack Nuget'
  inputs:
    command: custom
    custom: pack
    projects: '${{ parameters.solution }}'
    arguments: '--configuration ${{ parameters.configuration }} --output $(Build.ArtifactStagingDirectory) --no-build -p:PackageVersion="${{ parameters.nugetVersion }}" -p:GeneratePackageOnBuild=false'

- task: DotNetCoreCLI@2
  displayName: '.NET Test'
  env:
    TEST_SERVER: '$(testServer)'
    NODE_MODULES_PATH: '$(nodeModulesPath)'
    AZUREFUNCTIONS_SQLBINDINGS_TELEMETRY_OPTOUT: '1'
  inputs:
    command: test
    projects: '${{ parameters.solution }}'
    arguments: '--configuration ${{ parameters.configuration }} ${{ parameters.testFilter }} --collect "Code Coverage" -s $(Build.SourcesDirectory)/test/coverage.runsettings'
  condition: and(succeeded(), ne(variables['Agent.OS'], 'linux'))

- task: DotNetCoreCLI@2
  displayName: '.NET Test on Linux'
  env:
    SA_PASSWORD: '$(serverPassword)'
    AZUREFUNCTIONS_SQLBINDINGS_TELEMETRY_OPTOUT: '1'
  inputs:
    command: test
    projects: '${{ parameters.solution }}'
    arguments: '--configuration ${{ parameters.configuration }} ${{ parameters.testFilter }} --collect "Code Coverage" -s $(Build.SourcesDirectory)/test/coverage.runsettings'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'linux'))

- script: |
    docker stop sql1
    docker rm sql1
  displayName: 'Stop and Remove SQL Server Image'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'linux'))

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'
  inputs:
    failOnAlert: true

- task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@2
  displayName: 'Post Analysis'
  inputs:
    GdnBreakPolicyMinSev: Error
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
