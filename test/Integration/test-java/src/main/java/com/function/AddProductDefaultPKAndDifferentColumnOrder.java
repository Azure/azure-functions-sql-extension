/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 */

package com.function;

import com.microsoft.azure.functions.HttpMethod;
import com.microsoft.azure.functions.HttpRequestMessage;
import com.microsoft.azure.functions.HttpResponseMessage;
import com.microsoft.azure.functions.HttpStatus;
import com.microsoft.azure.functions.OutputBinding;
import com.microsoft.azure.functions.annotation.AuthorizationLevel;
import com.microsoft.azure.functions.annotation.FunctionName;
import com.microsoft.azure.functions.annotation.HttpTrigger;
import com.microsoft.azure.functions.sql.annotation.SQLOutput;
import com.function.Common.ProductDefaultPKAndDifferentColumnOrder;

import java.util.Optional;

/**
 * This shows an example of a SQL Output binding where the target table has a default primary key
 * of type uniqueidentifier and the column is not included in the output object. The order of the
 * properties in the POCO is different from the order of the columns in the SQL table. A new row will
 * be inserted and the uniqueidentifier will be generated by the engine.
 */
public class AddProductDefaultPKAndDifferentColumnOrder {
    @FunctionName("AddProductDefaultPKAndDifferentColumnOrder")
    public HttpResponseMessage run(
            @HttpTrigger(
                name = "req",
                methods = {HttpMethod.GET},
                authLevel = AuthorizationLevel.ANONYMOUS,
                route = "addproductdefaultpkanddifferentcolumnorder")
                HttpRequestMessage<Optional<String>> request,
            @SQLOutput(
                name = "product",
                commandText = "dbo.ProductsWithDefaultPK",
                connectionStringSetting = "SqlConnectionString")
                OutputBinding<ProductDefaultPKAndDifferentColumnOrder> product) {

        ProductDefaultPKAndDifferentColumnOrder p = new ProductDefaultPKAndDifferentColumnOrder(
            100,
            "test");
        product.setValue(p);

        return request.createResponseBuilder(HttpStatus.OK).header("Content-Type", "application/json").body(product).build();
    }
}
